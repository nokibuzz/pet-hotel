// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// password and other stuffs are optional cause of social login option
model User {
    id               String           @id @default(uuid())
    name             String?
    businessName     String?
    email            String?          @unique
    emailVerified    DateTime?
    isNewUser        Boolean
    hotelOwner       Boolean          @default(false)
    image            String?
    hashedPassword   String?
    defaultLocation  Json?
    locale           String           @default("sr")
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    favouriteIds     String[]
    totalReviews     Int              @default(0)
    likedReviews     Int              @default(0)
    dislikedReviews  Int              @default(0)
    positiveFeedback Int              @default(0)
    negativeFeedback Int              @default(0)
    reactions        ReviewReaction[]

    verified Boolean? @default(true)
    // TODO: replace this token in cache
    token    String?

    accounts     Account[]
    listings     Listing[]
    reservations Reservation[]
    pet          Pet[]
    reviews      Review[]
    Notification Notification[]
}

model Account {
    id                String  @id @default(uuid())
    userId            String?
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Listing {
    id                    String         @id @default(uuid())
    userId                String?
    title                 String
    description           String
    imageSrc              String[] // Storing images as String array
    createdAt             DateTime       @default(now())
    category              String
    price                 Int
    checkInTime           String
    checkOutTime          String
    hasCancelation        Boolean?
    allowBooking          Boolean?
    paymentMethodsCards   Boolean
    paymentMethodsCash    Boolean
    paymentMethodsAccount Boolean        @default(true)
    hasFood               Boolean
    hasGrooming           Boolean
    hasVet                Boolean
    addionalInformation   String?
    blockedBreeds         String[]
    capacityType          CapacityType   @default(TOTAL) // TOTAL or ADVANCED
    totalPlaces           Int?
    types                 Type[]
    blockedDates          BlockedDate[]
    notifications         Notification[]
    totalReviews          Int            @default(0)
    overallReview         Float          @default(0)
    addressLabel          String
    verified              Boolean?       @default(false)
    // TODO: add accomulated ratings

    user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    reviews Review[]
}

model SpecialPrice {
    id           String   @id @default(uuid())
    typeId       String
    startDate    DateTime
    endDate      DateTime
    defaultPrice Float
    weekendPrice Float?
    reason       String?
    type         Type     @relation(fields: [typeId], references: [id], onDelete: Cascade)

    @@index([typeId, startDate, endDate])
}

enum CapacityType {
    TOTAL
    ADVANCED
}

model Type {
    id           String         @id @default(uuid())
    listingId    String
    name         String
    capacity     Int
    defaultPrice Float
    weekendPrice Float?
    listing      Listing        @relation(fields: [listingId], references: [id], onDelete: Cascade)
    SpecialPrice SpecialPrice[]
    Reservation  Reservation[]
    Availability Availability[]
    BlockedDate  BlockedDate[]

    @@index([listingId])
    @@index([defaultPrice])
}

model Availability {
    id         String   @id @default(uuid())
    typeId     String
    typeName   String?
    date       DateTime
    available  Boolean  @default(true)
    totalSlots Int?
    type       Type     @relation(fields: [typeId], references: [id], onDelete: Cascade)

    @@index([typeId, date])
    @@index([typeId, date, available])
}

model Reservation {
    id               String   @id @default(uuid())
    userId           String?
    typeId           String?
    petId            String?
    breed            String?
    breedDescription String?
    startDate        DateTime
    endDate          DateTime
    status           String   @default("pending") // pending, approved, canceled, completed
    totalPrice       Float
    createdAt        DateTime @default(now())
    rejectReason     String?

    paymentMethod   String  @default("Cash")
    stripePaymentId String?
    refundStatus    String?
    type            Type?   @relation(fields: [typeId], references: [id], onDelete: Cascade)

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    pet  Pet?  @relation(fields: [petId], references: [id], onDelete: Cascade)

    @@index([typeId, startDate, endDate])
}

model BlockedDate {
    id        String   @id @default(uuid())
    listingId String
    typeId    String
    startDate DateTime
    endDate   DateTime
    reason    String?
    listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
    type      Type     @relation(fields: [typeId], references: [id], onDelete: Cascade)

    @@index([listingId, startDate, endDate])
}

model Notification {
    id        String   @id @default(uuid())
    listingId String
    userId    String?
    message   String
    status    String   @default("unread")
    createdAt DateTime @default(now())
    listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
    user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Pet {
    id             String   @id @default(uuid())
    name           String
    typeName       String
    breed          String
    birth          String
    friendly       Int
    vaccinated     Boolean
    imageSrc       String[]
    description    String?
    userId         String
    additionalInfo String?

    owner       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Reservation Reservation[]
}

model Review {
    id        String @id @default(uuid())
    userId    String
    listingId String

    overallRating  Int
    locationRating Int
    serviceRating  Int
    checkInRating  Int
    suggestUs      Boolean @default(false)

    title          String
    positiveReview String
    negativeReview String

    likes     Int      @default(0)
    dislikes  Int      @default(0)
    createdAt DateTime @default(now())

    user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing   Listing          @relation(fields: [listingId], references: [id], onDelete: Cascade)
    reactions ReviewReaction[]
}

model ReviewReaction {
    id        String   @id @default(uuid())
    reviewId  String
    userId    String
    reaction  String
    createdAt DateTime @default(now())

    review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([reviewId, userId])
}

//create index on listings { "location": "2dsphere" }
// create migration: npx prisma migrate dev --name init
// run migration: npx prisma db push
