// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// password and other stuffs are optional cause of social login option
model User {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    businessName    String?
    email           String?          @unique
    emailVerified   DateTime?
    hotelOwner      Boolean          @default(false)
    image           String?
    hashedPassword  String?
    defaultLocation Json?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    favouriteIds    String[]         @db.ObjectId
    totalReviews    Int              @default(0)
    likedReviews    Int              @default(0)
    dislikedReviews Int              @default(0)
    reactions       ReviewReaction[]

    accounts     Account[]
    listings     Listing[]
    reservations Reservation[]
    pet          Pet[]
    reviews      Review[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String? @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Listing {
    id                  String        @id @default(auto()) @map("_id") @db.ObjectId
    userId              String?       @db.ObjectId
    title               String
    description         String
    imageSrc            String
    createdAt           DateTime      @default(now())
    category            String
    roomCount           Int
    guestCount          Int
    price               Int
    checkInTime         String
    checkOutTime        String
    hasCancelation      Boolean
    allowBooking        Boolean
    paymentMethodsCards Boolean
    paymentMethodsCash  Boolean
    hasFood             Boolean
    hasGrooming         Boolean
    hasVet              Boolean
    addionalInformation String?
    location            Json
    reservations        Reservation[]
    totalReviews        Int           @default(0)
    // TODO: add accomulated ratings

    user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    reviews Review[]
}

model Reservation {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    userId     String?  @db.ObjectId
    listingId  String?  @db.ObjectId
    startDate  DateTime
    endDate    DateTime
    totalPrice Int
    createdAt  DateTime @default(now())

    user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Pet {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    breed       String
    age         Int
    friendly    Boolean
    vaccinated  Boolean
    imageSrc    String
    description String?
    userId      String  @db.ObjectId

    owner User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    userId    String @db.ObjectId
    listingId String @db.ObjectId

    overallRating  Int
    locationRating Int
    serviceRating  Int
    checkInRating  Int
    suggestUs      Boolean @default(false)

    title          String
    positiveReview String
    negativeReview String

    likes     Int      @default(0)
    dislikes  Int      @default(0)
    createdAt DateTime @default(now())

    user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing   Listing          @relation(fields: [listingId], references: [id], onDelete: Cascade)
    reactions ReviewReaction[]
}

model ReviewReaction {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    reviewId  String   @db.ObjectId
    userId    String   @db.ObjectId
    reaction  String // "like" or "dislike"
    createdAt DateTime @default(now())

    review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([reviewId, userId]) // Ensure one reaction per user per review
}

model Message {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId      String
  receiverId    String
  content       String
  timestamp     DateTime @default(now())
  chatId        String
}

// username:dogohotel
// password:dogohoteltest0

//create index on listings { "location": "2dsphere" }
