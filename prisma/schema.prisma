// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// password and other stuffs are optional cause of social login option
model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    businessName   String?
    email          String?   @unique
    emailVerified  DateTime?
    hotelOwner     Boolean   @default(false)
    image          String?
    hashedPassword String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    favouriteIds   String[]  @db.ObjectId

    accounts     Account[]
    listings     Listing[]
    reservations Reservation[]
    pet          Pet[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String? @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Listing {
    id                  String        @id @default(auto()) @map("_id") @db.ObjectId
    userId              String?       @db.ObjectId
    title               String
    description         String
    imageSrc            String
    createdAt           DateTime      @default(now())
    category            String
    roomCount           Int
    guestCount          Int
    locationValue       String
    price               Int
    checkInTime         String
    checkOutTime        String
    hasCancelation      Boolean
    allowBooking        Boolean
    paymentMethodsCards Boolean
    paymentMethodsCash  Boolean
    hasFood             Boolean
    hasGrooming         Boolean
    hasVet              Boolean
    addionalInformation String?
    reservations        Reservation[]

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    userId     String?  @db.ObjectId
    listingId  String?  @db.ObjectId
    startDate  DateTime
    endDate    DateTime
    totalPrice Int
    createdAt  DateTime @default(now())

    user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    listing Listing? @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Pet {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    breed       String
    age         Int
    friendly    Boolean
    vaccinated  Boolean
    imageSrc    String
    description String?
    userId      String  @db.ObjectId

    owner User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// username:dogohotel
// password:dogohoteltest0
